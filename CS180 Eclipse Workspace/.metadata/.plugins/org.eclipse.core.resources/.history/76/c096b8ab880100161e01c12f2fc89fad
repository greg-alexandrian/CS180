package eight.one.five;

// Fig. 8.7: Date.java 
// Date class declaration.
/*
 * Application takes dates three different ways and 
 * the program will validate that arguments passed at object's creation are valid
 */

public class Date 
{
	private int month; // 1-12
	private int day; // 1-31 based on month
	private int year; // any year

	public Date(int dayOfYear, int theYear) {
		day = checkDayOfMonth(dayOfYear);
		year = theYear;
		toString(dayOfYear, theYear);
		
	}
	// constructor: call checkMonth to confirm proper value for month; 
	// call checkDay to confirm proper value for day
	public Date( int theMonth, int theDay, int theYear ){
		month = checkMonth( theMonth ); // validate month
		year = theYear; // could validate year
		day = checkDay( theDay ); // validate day

		System.out.println( this ); //implicitly calls toString()
	} // end Date constructor

	public Date(String theMonth, int theDay, int theYear) {
		month = checkMonthString( theMonth );
		year = theYear;
		day = checkDay( theDay );
		checkMonth(month);
		checkMonthArrayValue(month);
	}

	// utility method to confirm proper day value based on month and year
	public int checkDay( int testDay ){
		int[] daysPerMonth = 
			{ 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

		// check if day in range for month
		if ( testDay > 0 && testDay <= daysPerMonth[ month ] )
			return testDay;

		// check for leap year
		if ( month == 2 && testDay == 29 && ( year % 400 == 0 || 
				( year % 4 == 0 && year % 100 != 0 ) ) )
			return testDay;

		System.out.printf( "Invalid day (%d) set to 1.", testDay );
		return 1;  // maintain object in consistent state
	} // end method checkDay

	public int checkDayOfMonth(int dayOfYear) {
		if ( dayOfYear > 0 && dayOfYear <= 365 )
			return dayOfYear;
		else
			System.out.println("You entered an Invalid Day of Year");
		return 0;
	}
	// utility method to confirm proper month value
	public int checkMonth( int testMonth )
	{
		if ( testMonth > 0 && testMonth <= 12 ) // validate month
			return testMonth;
		else // month is invalid 
		{ 
			System.out.printf( 
					"Invalid month (%d) set to 1.", testMonth );
			return 1; // maintain object in consistent state
		} // end else
	} // end method checkMonth
	//check to see if string sent is equal 
	public int checkMonthString(String theMonth) {
		int m = 0;
		String months[] = {
				null , "January" , "February" , "March" , "April", "May",
				"June", "July", "August", "September", "October",
				"November", "December"};
		for(int index = 0; index<months.length;index++){
			if(theMonth.equals(months[index])){
				return index;
			}	
		}

		return m;
	}

	public String checkMonthArrayValue(int theMonth){
		String months[] = { null , "January" , "February" , "March" , "April", "May",
				"June", "July", "August", "September", "October",
				"November", "December"};
		for(int index = 0; index<months.length;index++){
			if(theMonth == index){
				toString(months[index]);
			}
		}
		return null;
	}
	// return a String of the form month/day/year
	public String toString()
	{ 
		return String.format( "%d/%d/%d", month, day, year ); 

	} // end method toString

	public void toString(int dayOfYear, int theYear) {
		System.out.println(String.format("%d/%d", day, year));
		
	}

	public void toString(String monthsValue) {
		System.out.println(String.format("%s/%d/%d", monthsValue, day, year));

	}
} // end class Date


